{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IERC20Minimal.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Minimal ERC20 interface for Uniswap\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\ninterface IERC20Minimal {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/test/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport '../interfaces/IERC20Minimal.sol';\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/* This token is ONLY useful for testing\n * Anybody can mint as many tokens as they like\n * Anybody can burn anyone else's tokens\n */\ncontract TestERC20 is ERC20 {\n    constructor() ERC20(\"Test Token\", \"TEST\") {\n        _mint(msg.sender, 1000000 ether);\n    }\n\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external {\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interpreters/FulfillInterpreter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport \"../interfaces/IFulfillInterpreter.sol\";\nimport \"../lib/LibAsset.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract FulfillInterpreter is ReentrancyGuard, IFulfillInterpreter {\n  address private _transactionManager;\n\n  constructor(address transactionManager) {\n    _transactionManager = transactionManager;\n  }\n\n  /// @notice Errors if the sender is not the transaction manager\n  modifier onlyTransactionManager {\n    require(msg.sender == _transactionManager, \"#OTM:027\");\n    _;\n  }\n\n  /// @notice Returns the transaction manager address (only address that can \n  ///         call the `execute` function)\n  function getTransactionManager() override external view returns (address) {\n    return _transactionManager;\n  }\n\n  /// @notice Executes some arbitrary call data on a given address. The\n  ///         call data executes can be payable, and will have `amount` sent\n  ///         along with the function (or approved to the contract). If the\n  ///         call fails, rather than reverting, funds are sent directly to \n  ///         some provided fallbaack address\n  /// @param callTo The address to execute the calldata on\n  /// @param assetId The assetId of the funds to approve to the contract or\n  ///                send along with the call\n  /// @param fallbackAddress The address to send funds to if the `call` fails\n  /// @param amount The amount to approve or send with the call\n  /// @param callData The data to execute\n  function execute(\n    bytes32 transactionId,\n    address payable callTo,\n    address assetId,\n    address payable fallbackAddress,\n    uint256 amount,\n    bytes calldata callData\n  ) override external payable nonReentrant onlyTransactionManager {\n    // If it is not ether, approve the callTo\n    // We approve here rather than transfer since many external contracts\n    // simply require an approval, and it is unclear if they can handle \n    // funds transferred directly to them (i.e. Uniswap)\n    bool isEther = LibAsset.isEther(assetId);\n    if (!isEther) {\n      LibAsset.increaseERC20Allowance(assetId, callTo, amount);\n    }\n\n    // Try to execute the callData\n    // the low level call will return `false` if its execution reverts\n    (bool success, bytes memory returnData) = callTo.call{value: isEther ? amount : 0}(callData);\n\n    if (!success) {\n      // If it fails, transfer to fallback\n      LibAsset.transferAsset(assetId, fallbackAddress, amount);\n      // Decrease allowance\n      if (!isEther) {\n        LibAsset.decreaseERC20Allowance(assetId, callTo, amount);\n      }\n    }\n\n    // Emit event\n    emit Executed(\n      transactionId,\n      callTo,\n      assetId,\n      fallbackAddress,\n      amount,\n      callData,\n      returnData,\n      success\n    );\n  }\n}"
    },
    "contracts/interfaces/IFulfillInterpreter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\ninterface IFulfillInterpreter {\n\n  event Executed(\n    bytes32 indexed transactionId,\n    address payable callTo,\n    address assetId,\n    address payable fallbackAddress,\n    uint256 amount,\n    bytes callData,\n    bytes returnData,\n    bool success\n  );\n\n  function getTransactionManager() external returns (address);\n\n  function execute(\n    bytes32 transactionId,\n    address payable callTo,\n    address assetId,\n    address payable fallbackAddress,\n    uint256 amount,\n    bytes calldata callData\n  ) external payable;\n}\n"
    },
    "contracts/lib/LibAsset.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\n/// @title LibAsset\n/// @author Connext <support@connext.network>\n/// @notice This library contains helpers for dealing with onchain transfers\n///         of assets, including accounting for the native asset `assetId`\n///         conventions and any noncompliant ERC20 transfers\n\nlibrary LibAsset {\n    /// @dev All native assets use the empty address for their asset id\n    ///      by convention\n    address constant NATIVE_ASSETID = address(0);\n\n    /// @notice Determines whether the given assetId is the native asset\n    /// @param assetId The asset identifier to evaluate\n    function isEther(address assetId) internal pure returns (bool) {\n      return assetId == NATIVE_ASSETID;\n    }\n\n    /// @notice Gets the balance of the inheriting contract for the given asset\n    /// @param assetId The asset identifier to get the balance of\n    function getOwnBalance(address assetId) internal view returns (uint256) {\n      return\n        isEther(assetId)\n          ? address(this).balance\n          : IERC20(assetId).balanceOf(address(this));\n    }\n\n    /// @notice Transfers ether from the inheriting contract to a given\n    ///         recipient\n    /// @param recipient Address to send ether to\n    /// @param amount Amount to send to given recipient\n    function transferEther(address payable recipient, uint256 amount)\n        internal\n    {\n      (bool success,) = recipient.call{value: amount}(\"\");\n      require(success, \"#TE:028\");\n    }\n\n    /// @notice Transfers tokens from the inheriting contract to a given\n    ///         recipient\n    /// @param assetId Token address to transfer\n    /// @param recipient Address to send ether to\n    /// @param amount Amount to send to given recipient\n    function transferERC20(\n        address assetId,\n        address recipient,\n        uint256 amount\n    ) internal {\n      SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);\n    }\n\n    /// @notice Transfers tokens from a sender to a given recipient\n    /// @param assetId Token address to transfer\n    /// @param from Address of sender/owner\n    /// @param to Address of recipient/spender\n    /// @param amount Amount to transfer from owner to spender\n    function transferFromERC20(\n      address assetId,\n      address from,\n      address to,\n      uint256 amount\n    ) internal {\n      SafeERC20.safeTransferFrom(IERC20(assetId), from, to, amount);\n    }\n\n    /// @notice Increases the allowance of a token to a spender\n    /// @param assetId Token address of asset to increase allowance of\n    /// @param spender Account whos allowance is increased\n    /// @param amount Amount to increase allowance by\n    function increaseERC20Allowance(\n      address assetId,\n      address spender,\n      uint256 amount\n    ) internal {\n      require(!isEther(assetId), \"#IA:034\");\n      SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, amount);\n    }\n\n    /// @notice Decreases the allowance of a token to a spender\n    /// @param assetId Token address of asset to decrease allowance of\n    /// @param spender Account whos allowance is decreased\n    /// @param amount Amount to decrease allowance by\n    function decreaseERC20Allowance(\n      address assetId,\n      address spender,\n      uint256 amount\n    ) internal {\n      require(!isEther(assetId), \"#DA:034\");\n      SafeERC20.safeDecreaseAllowance(IERC20(assetId), spender, amount);\n    }\n\n    /// @notice Wrapper function to transfer a given asset (native or erc20) to\n    ///         some recipient. Should handle all non-compliant return value\n    ///         tokens as well by using the SafeERC20 contract by open zeppelin.\n    /// @param assetId Asset id for transfer (address(0) for native asset, \n    ///                token address for erc20s)\n    /// @param recipient Address to send asset to\n    /// @param amount Amount to send to given recipient\n    function transferAsset(\n        address assetId,\n        address payable recipient,\n        uint256 amount\n    ) internal {\n      isEther(assetId)\n        ? transferEther(recipient, amount)\n        : transferERC20(assetId, recipient, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/TransactionManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport \"./interfaces/IFulfillInterpreter.sol\";\nimport \"./interfaces/ITransactionManager.sol\";\nimport \"./interpreters/FulfillInterpreter.sol\";\nimport \"./ProposedOwnable.sol\";\nimport \"./lib/LibAsset.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n\n/// @title TransactionManager\n/// @author Connext <support@connext.network>\n/// @notice This contract holds the logic to facilitate crosschain transactions.\n///         Transactions go through three phases:\n///\n///         1. Route Auction: User broadcasts to our network signalling their \n///         desired route. Routers respond with sealed bids containing \n///         commitments to fulfilling the transaction within a certain time and \n///         price range.\n///\n///         2. Prepare: Once the auction is completed, the transaction can be \n///         prepared. The user submits a transaction to `TransactionManager` \n///         contract on sender-side chain containing router's signed bid. This \n///         transaction locks up the users funds on the sending chiain. Upon \n///         detecting an event containing their signed bid from the chain, \n///         router submits the same transaction to `TransactionManager` on the \n///         receiver-side chain, and locks up a corresponding amount of \n///         liquidity. The amount locked on the receiving chain is `sending \n///         amount - auction fee` so the router is incentivized to complete the \n///         transaction.\n///\n///         3. Fulfill: Upon detecting the `TransactionPrepared` event on the \n///         receiver-side chain, the user signs a message and sends it to a \n///         relayer, who will earn a fee for submission. The relayer (which may \n///         be the router) then submits the message to the `TransactionManager` \n///         to complete their transaction on receiver-side chain and claim the \n///         funds locked by the router. A relayer is used here to allow users \n///         to submit transactions with arbitrary calldata on the receiving \n///         chain without needing gas to do so. The router then submits the \n///         same signed message and completes transaction on sender-side, \n///         unlocking the original `amount`.\n///\n///         If a transaction is not fulfilled within a fixed timeout, it \n///         reverts and can be reclaimed by the party that called `prepare` on \n///         each chain (initiator). Additionally, transactions can be cancelled \n///         unilaterally by the person owed funds on that chain (router for \n///         sending chain, user for receiving chain) prior to expiry.\n\ncontract TransactionManager is ReentrancyGuard, ProposedOwnable, ITransactionManager {\n  /// @dev Mapping of router to balance specific to asset\n  mapping(address => mapping(address => uint256)) public routerBalances;\n\n  /// @dev Mapping of allowed router addresses\n  mapping(address => bool) public approvedRouters;\n\n  /// @dev Mapping of allowed assetIds on same chain of contract\n  mapping(address => bool) public approvedAssets;\n\n  /// @dev Mapping of hash of `InvariantTransactionData` to the hash\n  //       of the `VariantTransactionData`\n  mapping(bytes32 => bytes32) public variantTransactionData;\n\n  /// @dev The chain id of the contract, is passed in to avoid any evm issues\n  uint256 public immutable chainId;\n\n  /// @dev Minimum timeout (will be the lowest on the receiving chain)\n  uint256 public constant MIN_TIMEOUT = 1 days; // 24 hours\n\n  /// @dev Maximum timeout\n  uint256 public constant MAX_TIMEOUT = 30 days; // 720 hours\n\n  IFulfillInterpreter public immutable interpreter;\n\n  constructor(uint256 _chainId) {\n    chainId = _chainId;\n    interpreter = new FulfillInterpreter(address(this));\n  }\n\n  /// @notice Indicates if the ownership has been renounced() by\n  ///         checking if current owner is address(0)\n  function renounced() public view override returns (bool) {\n    return owner() == address(0);\n  }\n\n  /// @notice Used to add routers that can transact crosschain\n  /// @param router Router address to add\n  function addRouter(address router) external override onlyOwner {\n    // Sanity check: not empty\n    require(router != address(0), \"#AR:001\");\n\n    // Sanity check: needs approval\n    require(approvedRouters[router] == false, \"#AR:032\");\n\n    // Update mapping\n    approvedRouters[router] = true;\n\n    // Emit event\n    emit RouterAdded(router, msg.sender);\n  }\n\n  /// @notice Used to remove routers that can transact crosschain\n  /// @param router Router address to remove\n  function removeRouter(address router) external override onlyOwner {\n    // Sanity check: not empty\n    require(router != address(0), \"#RR:001\");\n\n    // Sanity check: needs removal\n    require(approvedRouters[router] == true, \"#RR:033\");\n\n    // Update mapping\n    approvedRouters[router] = false;\n\n    // Emit event\n    emit RouterRemoved(router, msg.sender);\n  }\n\n  /// @notice Used to add assets on same chain as contract that can\n  ///         be transferred.\n  /// @param assetId AssetId to add\n  function addAssetId(address assetId) external override onlyOwner {\n    // Sanity check: needs approval\n    require(approvedAssets[assetId] == false, \"#AA:032\");\n\n    // Update mapping\n    approvedAssets[assetId] = true;\n\n    // Emit event\n    emit AssetAdded(assetId, msg.sender);\n  }\n\n  /// @notice Used to remove assets on same chain as contract that can\n  ///         be transferred.\n  /// @param assetId AssetId to remove\n  function removeAssetId(address assetId) external override onlyOwner {\n    // Sanity check: already approval\n    require(approvedAssets[assetId] == true, \"#RA:033\");\n\n    // Update mapping\n    approvedAssets[assetId] = false;\n\n    // Emit event\n    emit AssetRemoved(assetId, msg.sender);\n  }\n\n  /// @notice This is used by any router to increase their available\n  ///         liquidity for a given asset.\n  /// @param amount The amount of liquidity to add for the router\n  /// @param assetId The address (or `address(0)` if native asset) of the\n  ///                asset you're adding liquidity for\n  /// @param router The router you are adding liquidity on behalf of\n  function addLiquidity(uint256 amount, address assetId, address router) external payable override {\n    // Sanity check: router is sensible\n    require(router != address(0), \"#AL:001\");\n\n    // Sanity check: nonzero amounts\n    require(amount > 0, \"#AL:002\");\n\n    // Store renounced() result in memory for gas\n    bool isRenounced = renounced();\n\n    // Router is approved\n    require(isRenounced || approvedRouters[router], \"#AL:003\");\n\n    // Asset is approved\n    require(isRenounced || approvedAssets[assetId], \"#AL:004\");\n\n    // Update the router balances\n    routerBalances[router][assetId] += amount;\n\n    // Validate correct amounts are transferred\n    if (LibAsset.isEther(assetId)) {\n      require(msg.value == amount, \"#AL:005\");\n    } else {\n      require(msg.value == 0, \"#AL:006\");\n      LibAsset.transferFromERC20(assetId, msg.sender, address(this), amount);\n    }\n\n    // Emit event\n    emit LiquidityAdded(router, assetId, amount, msg.sender);\n  }\n\n  /// @notice This is used by any router to decrease their available\n  ///         liquidity for a given asset.\n  /// @param amount The amount of liquidity to remove for the router\n  /// @param assetId The address (or `address(0)` if native asset) of the\n  ///                asset you're removing liquidity for\n  /// @param recipient The address that will receive the liquidity being removed\n  function removeLiquidity(\n    uint256 amount,\n    address assetId,\n    address payable recipient\n  ) external override {\n    // Sanity check: recipient is sensible\n    require(recipient != address(0), \"#RL:007\");\n\n    // Sanity check: nonzero amounts\n    require(amount > 0, \"#RL:002\");\n\n    uint256 routerBalance = routerBalances[msg.sender][assetId];\n    // Sanity check: amount can be deducted for the router\n    require(routerBalance >= amount, \"#RL:008\");\n\n    // Update router balances\n    unchecked {\n      routerBalances[msg.sender][assetId] = routerBalance - amount;\n    }\n\n    // Transfer from contract to specified recipient\n    LibAsset.transferAsset(assetId, recipient, amount);\n\n    // Emit event\n    emit LiquidityRemoved(msg.sender, assetId, amount, recipient);\n  }\n\n  /// @notice This function creates a crosschain transaction. When called on\n  ///         the sending chain, the user is expected to lock up funds. When\n  ///         called on the receiving chain, the router deducts the transfer\n  ///         amount from the available liquidity. The majority of the\n  ///         information about a given transfer does not change between chains,\n  ///         with three notable exceptions: `amount`, `expiry`, and \n  ///         `preparedBlock`. The `amount` and `expiry` are decremented\n  ///         between sending and receiving chains to provide an incentive for \n  ///         the router to complete the transaction and time for the router to\n  ///         fulfill the transaction on the sending chain after the unlocking\n  ///         signature is revealed, respectively.\n  /// @param invariantData The data for a crosschain transaction that will\n  ///                      not change between sending and receiving chains.\n  ///                      The hash of this data is used as the key to store \n  ///                      the inforamtion that does change between chains \n  ///                      (amount, expiry,preparedBlock) for verification\n  /// @param amount The amount of the transaction on this chain\n  /// @param expiry The block.timestamp when the transaction will no longer be\n  ///               fulfillable and is freely cancellable on this chain\n  /// @param encryptedCallData The calldata to be executed when the tx is\n  ///                          fulfilled. Used in the function to allow the user\n  ///                          to reconstruct the tx from events. Hash is stored\n  ///                          onchain to prevent shenanigans.\n  /// @param encodedBid The encoded bid that was accepted by the user for this\n  ///                   crosschain transfer. It is supplied as a param to the\n  ///                   function but is only used in event emission\n  /// @param bidSignature The signature of the bidder on the encoded bid for\n  ///                     this transaction. Only used within the function for\n  ///                     event emission. The validity of the bid and\n  ///                     bidSignature are enforced offchain\n  function prepare(\n    InvariantTransactionData calldata invariantData,\n    uint256 amount,\n    uint256 expiry,\n    bytes calldata encryptedCallData,\n    bytes calldata encodedBid,\n    bytes calldata bidSignature\n  ) external payable override returns (TransactionData memory) {\n    // Sanity check: user is sensible\n    require(invariantData.user != address(0), \"#P:009\");\n\n    // Sanity check: router is sensible\n    require(invariantData.router != address(0), \"#P:001\");\n\n    // Router is approved *on both chains*\n    bool isRenounced = renounced(); // cache for gas\n    require(isRenounced || approvedRouters[invariantData.router], \"#P:003\");\n\n    // Sanity check: sendingChainFallback is sensible\n    require(invariantData.sendingChainFallback != address(0), \"#P:010\");\n\n    // Sanity check: valid fallback\n    require(invariantData.receivingAddress != address(0), \"#P:026\");\n\n    // Make sure the chains are different\n    require(invariantData.sendingChainId != invariantData.receivingChainId, \"#P:011\");\n\n    // Make sure the chains are relevant\n    require(invariantData.sendingChainId == chainId || invariantData.receivingChainId == chainId, \"#P:012\");\n\n    // Make sure the expiry is greater than min\n    require((expiry - block.timestamp) >= MIN_TIMEOUT, \"#P:013\");\n\n    // Make sure the expiry is lower than max\n    require((expiry - block.timestamp) <= MAX_TIMEOUT, \"#P:014\");\n\n    // Make sure the hash is not a duplicate\n    bytes32 digest = keccak256(abi.encode(invariantData));\n    require(variantTransactionData[digest] == bytes32(0), \"#P:015\");\n\n    // NOTE: the `encodedBid` and `bidSignature` are simply passed through\n    //       to the contract emitted event to ensure the availability of\n    //       this information. Their validity is asserted offchain, and\n    //       is out of scope of this contract. They are used as inputs so\n    //       in the event of a router or user crash, they may recover the\n    //       correct bid information without requiring an offchain store.\n\n    // First determine if this is sender side or receiver side\n    if (invariantData.sendingChainId == chainId) {\n      // Sanity check: amount is sensible\n      // Only check on sending chain to enforce router fees. Transactions could\n      // be 0-valued on receiving chain if it is just a value-less call to some\n      // `IFulfillHelper`\n      require(amount > 0, \"#P:002\");\n\n      // Assets are approved\n      // NOTE: Cannot check this on receiving chain because of differing\n      // chain contexts\n      require(isRenounced || approvedAssets[invariantData.sendingAssetId], \"#P:004\");\n\n      // Store the transaction variants\n      variantTransactionData[digest] = hashVariantTransactionData(amount, expiry, block.number);\n\n      // This is sender side prepare. The user is beginning the process of \n      // submitting an onchain tx after accepting some bid. They should\n      // lock their funds in the contract for the router to claim after\n      // they have revealed their signature on the receiving chain via\n      // submitting a corresponding `fulfill` tx\n\n      // Validate correct amounts on msg and transfer from user to\n      // contract\n      if (LibAsset.isEther(invariantData.sendingAssetId)) {\n        require(msg.value == amount, \"#P:005\");\n      } else {\n        require(msg.value == 0, \"#P:006\");\n        LibAsset.transferFromERC20(invariantData.sendingAssetId, msg.sender, address(this), amount);\n      }\n    } else {\n      // This is receiver side prepare. The router has proposed a bid on the\n      // transfer which the user has accepted. They can now lock up their\n      // own liquidity on th receiving chain, which the user can unlock by\n      // calling `fulfill`. When creating the `amount` and `expiry` on the\n      // receiving chain, the router should have decremented both. The\n      // expiry should be decremented to ensure the router has time to\n      // complete the sender-side transaction after the user completes the\n      // receiver-side transactoin. The amount should be decremented to act as\n      // a fee to incentivize the router to complete the transaction properly.\n\n      // Check that the callTo is a contract\n      // NOTE: This cannot happen on the sending chain (different chain \n      // contexts), so a user could mistakenly create a transfer that must be\n      // cancelled if this is incorrect\n      require(invariantData.callTo == address(0) || Address.isContract(invariantData.callTo), \"#P:031\");\n\n      // Check that the asset is approved\n      // NOTE: This cannot happen on both chains because of differing chain \n      // contexts. May be possible for user to create transaction that is not\n      // prepare-able on the receiver chain.\n      require(isRenounced || approvedAssets[invariantData.receivingAssetId], \"#P:004\");\n\n      // Check that the caller is the router\n      require(msg.sender == invariantData.router, \"#P:016\");\n\n      // Check that the router isnt accidentally locking funds in the contract\n      require(msg.value == 0, \"#P:017\");\n\n      // Check that router has liquidity\n      uint256 balance = routerBalances[invariantData.router][invariantData.receivingAssetId];\n      require(balance >= amount, \"#P:018\");\n\n      // Store the transaction variants\n      variantTransactionData[digest] = hashVariantTransactionData(amount, expiry, block.number);\n\n      // Decrement the router liquidity\n      // using unchecked because underflow protected against with require\n      unchecked {\n        routerBalances[invariantData.router][invariantData.receivingAssetId] = balance - amount;\n      }\n    }\n\n    // Emit event\n    TransactionData memory txData = TransactionData({\n      user: invariantData.user,\n      router: invariantData.router,\n      sendingAssetId: invariantData.sendingAssetId,\n      receivingAssetId: invariantData.receivingAssetId,\n      sendingChainFallback: invariantData.sendingChainFallback,\n      callTo: invariantData.callTo,\n      receivingAddress: invariantData.receivingAddress,\n      callDataHash: invariantData.callDataHash,\n      transactionId: invariantData.transactionId,\n      sendingChainId: invariantData.sendingChainId,\n      receivingChainId: invariantData.receivingChainId,\n      amount: amount,\n      expiry: expiry,\n      preparedBlockNumber: block.number\n    });\n    emit TransactionPrepared(txData.user, txData.router, txData.transactionId, txData, msg.sender, encryptedCallData, encodedBid, bidSignature);\n    return txData;\n  }\n\n\n\n  /// @notice This function completes a crosschain transaction. When called on\n  ///         the receiving chain, the user reveals their signature on the\n  ///         invariant parts of the transaction data and is sent the \n  ///         appropriate amount. The router then uses this signature to\n  ///         unlock the corresponding funds on the receiving chain, which are\n  ///         then added back to their available liquidity. The user includes a\n  ///         relayer fee since it is not assumed they will have gas on the\n  ///         receiving chain. This function *must* be called before the\n  ///         transaction expiry has elapsed.\n  /// @param txData All of the data (invariant and variant) for a crosschain\n  ///               transaction. The variant data provided is checked against\n  ///               what was stored when the `prepare` function was called.\n  /// @param relayerFee The fee that should go to the relayer when they are\n  ///                   calling the function on the receiving chain for the user\n  /// @param signature The users signature on the invariant data + fee that\n  ///                  can be used by the router to unlock the transaction on \n  ///                  the sending chain\n  /// @param callData The calldata to be sent to and executed by the \n  ///                 `FulfillHelper`\n  function fulfill(\n    TransactionData calldata txData,\n    uint256 relayerFee,\n    bytes calldata signature, // signature on fee + digest\n    bytes calldata callData\n  ) external override nonReentrant returns (TransactionData memory) {\n    // Get the hash of the invariant tx data. This hash is the same\n    // between sending and receiving chains. The variant data is stored\n    // in the contract when `prepare` is called within the mapping.\n    bytes32 digest = hashInvariantTransactionData(txData);\n\n    // Make sure that the variant data matches what was stored\n    require(variantTransactionData[digest] == hashVariantTransactionData(txData.amount, txData.expiry, txData.preparedBlockNumber), \"#F:019\");\n\n    // Make sure the expiry has not elapsed\n    require(txData.expiry >= block.timestamp, \"#F:020\");\n\n    // Make sure the transaction wasn't already completed\n    require(txData.preparedBlockNumber > 0, \"#F:021\");\n\n    // Validate the user has signed\n    require(recoverSignature(txData.transactionId, relayerFee, \"fulfill\", signature) == txData.user, \"#F:022\");\n\n    // Sanity check: fee <= amount. Allow `=` in case of only wanting to execute\n    // 0-value crosschain tx, so only providing the fee amount\n    require(relayerFee <= txData.amount, \"#F:023\");\n\n    // Check provided callData matches stored hash\n    require(keccak256(callData) == txData.callDataHash, \"#F:024\");\n\n    // To prevent `fulfill` / `cancel` from being called multiple times, the\n    // preparedBlockNumber is set to 0 before being hashed. The value of the\n    // mapping is explicitly *not* zeroed out so users who come online without\n    // a store can tell the difference between a transaction that has not been\n    // prepared, and a transaction that was already completed on the receiver\n    // chain.\n    variantTransactionData[digest] = hashVariantTransactionData(txData.amount, txData.expiry, 0);\n\n    if (txData.sendingChainId == chainId) {\n      // The router is completing the transaction, they should get the\n      // amount that the user deposited credited to their liquidity\n      // reserves.\n\n      // Make sure that the user is not accidentally fulfilling the transaction\n      // on the sending chain\n      require(msg.sender == txData.router, \"#F:016\");\n\n      // Complete tx to router for original sending amount\n      routerBalances[txData.router][txData.sendingAssetId] += txData.amount;\n      \n    } else {\n      // The user is completing the transaction, they should get the\n      // amount that the router deposited less fees for relayer.\n\n      // Get the amount to send\n      uint256 toSend;\n      unchecked {\n        toSend = txData.amount - relayerFee;\n      }\n\n      // Send the relayer the fee\n      if (relayerFee > 0) {\n        LibAsset.transferAsset(txData.receivingAssetId, payable(msg.sender), relayerFee);\n      }\n\n      // Handle receiver chain external calls if needed\n      if (txData.callTo == address(0)) {\n        // No external calls, send directly to receiving address\n        if (toSend > 0) {\n          LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend);\n        }\n      } else {\n        // Handle external calls with a fallback to the receiving\n        // address in case the call fails so the funds dont remain\n        // locked.\n\n        // First, transfer the funds to the helper if needed\n        // Cache in mem for gas\n        bool isEther = LibAsset.isEther(txData.receivingAssetId);\n        if (!isEther && toSend > 0) {\n          LibAsset.transferERC20(txData.receivingAssetId, address(interpreter), toSend);\n        }\n\n        // Next, call `execute` on the helper. Helpers should internally\n        // track funds to make sure no one user is able to take all funds\n        // for tx, and handle the case of reversions\n        interpreter.execute{ value: isEther ? toSend : 0}(\n          txData.transactionId,\n          payable(txData.callTo),\n          txData.receivingAssetId,\n          payable(txData.receivingAddress),\n          toSend,\n          callData\n        );\n      }\n    }\n\n    // Emit event\n    emit TransactionFulfilled(txData.user, txData.router, txData.transactionId, txData, relayerFee, signature, callData, msg.sender);\n\n    return txData;\n  }\n\n  /// @notice Any crosschain transaction can be cancelled after it has been\n  ///         created to prevent indefinite lock up of funds. After the\n  ///         transaction has expired, anyone can cancel it. Before the\n  ///         expiry, only the recipient of the funds on the given chain is\n  ///         able to cancel. On the sending chain, this means only the router\n  ///         is able to cancel before the expiry, while only the user can\n  ///         prematurely cancel on the receiving chain.\n  /// @param txData All of the data (invariant and variant) for a crosschain\n  ///               transaction. The variant data provided is checked against\n  ///               what was stored when the `prepare` function was called.\n  /// @param relayerFee The fee that should go to the relayer when they are\n  ///                   calling the function for the user\n  /// @param signature The user's signature that allows a transaction to be\n  ///                  cancelled on the receiving chain.\n  function cancel(TransactionData calldata txData, uint256 relayerFee, bytes calldata signature)\n    external\n    override\n    nonReentrant\n    returns (TransactionData memory)\n  {\n    // Make sure params match against stored data\n    // Also checks that there is an active transfer here\n    // Also checks that sender or receiver chainID is this chainId (bc we checked it previously)\n\n    // Get the hash of the invariant tx data. This hash is the same\n    // between sending and receiving chains. The variant data is stored\n    // in the contract when `prepare` is called within the mapping.\n    bytes32 digest = hashInvariantTransactionData(txData);\n\n    // Verify the variant data is correct\n    require(variantTransactionData[digest] == hashVariantTransactionData(txData.amount, txData.expiry, txData.preparedBlockNumber), \"#C:019\");\n\n    // Make sure the transaction wasn't already completed\n    require(txData.preparedBlockNumber > 0, \"#C:021\");\n\n    // Sanity check: fee <= amount. Allow `=` in case of only wanting to execute\n    // 0-value crosschain tx, so only providing the fee amount\n    require(relayerFee <= txData.amount, \"#C:023\");\n\n    // To prevent `fulfill` / `cancel` from being called multiple times, the\n    // preparedBlockNumber is set to 0 before being hashed. The value of the\n    // mapping is explicitly *not* zeroed out so users who come online without\n    // a store can tell the difference between a transaction that has not been\n    // prepared, and a transaction that was already completed on the receiver\n    // chain.\n    variantTransactionData[digest] = hashVariantTransactionData(txData.amount, txData.expiry, 0);\n\n    // Return the appropriate locked funds\n    if (txData.sendingChainId == chainId) {\n      // Sender side, funds must be returned to the user\n      if (txData.expiry >= block.timestamp) {\n        // Timeout has not expired and tx may only be cancelled by router\n        // NOTE: no need to validate the signature here, since you are requiring\n        // the router must be the sender when the cancellation is during the\n        // fulfill-able window\n        require(msg.sender == txData.router, \"#C:025\");\n\n        // Return totality of locked funds to provided fallbacl\n        LibAsset.transferAsset(txData.sendingAssetId, payable(txData.sendingChainFallback), txData.amount);\n      } else {\n        // When the user could be unlocking funds through a relayer, validate\n        // their signature and payout the relayer.\n        if (relayerFee > 0) {\n          require(msg.sender == txData.user || recoverSignature(txData.transactionId, relayerFee, \"cancel\", signature) == txData.user, \"#C:022\");\n\n          LibAsset.transferAsset(txData.sendingAssetId, payable(msg.sender), relayerFee);\n        }\n\n        // Get the amount to refund the user\n        uint256 toRefund;\n        unchecked {\n          toRefund = txData.amount - relayerFee; \n        }\n\n        // Return locked funds to sending chain fallback\n        if (toRefund > 0) {\n          LibAsset.transferAsset(txData.sendingAssetId, payable(txData.sendingChainFallback), toRefund);\n        }\n      }\n\n    } else {\n      // Receiver side, router liquidity is returned\n      if (txData.expiry >= block.timestamp) {\n        // Timeout has not expired and tx may only be cancelled by user\n        // Validate signature\n        require(msg.sender == txData.user || recoverSignature(txData.transactionId, relayerFee, \"cancel\", signature) == txData.user, \"#C:022\");\n\n        // NOTE: there is no incentive here for relayers to submit this on\n        // behalf of the user (i.e. fee not respected) because the user has not\n        // locked funds on this contract.\n      }\n\n      // Return liquidity to router\n      routerBalances[txData.router][txData.receivingAssetId] += txData.amount;\n    }\n\n    // Emit event\n    emit TransactionCancelled(txData.user, txData.router, txData.transactionId, txData, relayerFee, msg.sender);\n\n    // Return\n    return txData;\n  }\n\n  //////////////////////////\n  /// Private functions ///\n  //////////////////////////\n\n  /// @notice Recovers the signer from the signature provided by the user\n  /// @param transactionId Transaction identifier of tx being recovered\n  /// @param relayerFee The fee paid to the relayer for submitting the\n  ///                   tx on behalf of the user.\n  /// @param functionIdentifier The function the signature is being used for.\n  ///                           Either `fulfill` or `cancel`\n  /// @param signature The signature you are recovering the signer from\n  function recoverSignature(\n    bytes32 transactionId,\n    uint256 relayerFee,\n    string memory functionIdentifier,\n    bytes calldata signature\n  ) internal pure returns (address) {\n    // Create the signed payload\n    SignedData memory payload = SignedData({\n      transactionId: transactionId,\n      relayerFee: relayerFee,\n      functionIdentifier: functionIdentifier\n    });\n\n    // Recover\n    return ECDSA.recover(ECDSA.toEthSignedMessageHash(keccak256(abi.encode(payload))), signature);\n  }\n\n  /// @notice Returns the hash of only the invariant portions of a given\n  ///         crosschain transaction\n  /// @param txData TransactionData to hash\n  function hashInvariantTransactionData(TransactionData calldata txData) internal pure returns (bytes32) {\n    InvariantTransactionData memory invariant = InvariantTransactionData({\n      user: txData.user,\n      router: txData.router,\n      sendingAssetId: txData.sendingAssetId,\n      receivingAssetId: txData.receivingAssetId,\n      sendingChainFallback: txData.sendingChainFallback,\n      callTo: txData.callTo,\n      receivingAddress: txData.receivingAddress,\n      sendingChainId: txData.sendingChainId,\n      receivingChainId: txData.receivingChainId,\n      callDataHash: txData.callDataHash,\n      transactionId: txData.transactionId\n    });\n    return keccak256(abi.encode(invariant));\n  }\n\n  /// @notice Returns the hash of only the variant portions of a given\n  ///         crosschain transaction\n  /// @param amount amount to hash\n  /// @param expiry expiry to hash\n  /// @param preparedBlockNumber preparedBlockNumber to hash\n  function hashVariantTransactionData(uint256 amount, uint256 expiry, uint256 preparedBlockNumber) internal pure returns (bytes32) {\n    VariantTransactionData memory variant = VariantTransactionData({\n      amount: amount,\n      expiry: expiry,\n      preparedBlockNumber: preparedBlockNumber\n    });\n    return keccak256(abi.encode(variant));\n  }\n}\n"
    },
    "contracts/interfaces/ITransactionManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\ninterface ITransactionManager {\n  // Structs\n\n  // Holds all data that is constant between sending and\n  // receiving chains. The hash of this is what gets signed\n  // to ensure the signature can be used on both chains.\n  struct InvariantTransactionData {\n    address user;\n    address router;\n    address sendingAssetId;\n    address receivingAssetId;\n    address sendingChainFallback; // funds sent here on cancel\n    address receivingAddress;\n    address callTo;\n    uint256 sendingChainId;\n    uint256 receivingChainId;\n    bytes32 callDataHash; // hashed to prevent free option\n    bytes32 transactionId;\n  }\n\n  // Holds all data that varies between sending and receiving\n  // chains. The hash of this is stored onchain to ensure the\n  // information passed in is valid.\n  struct VariantTransactionData {\n    uint256 amount;\n    uint256 expiry;\n    uint256 preparedBlockNumber;\n  }\n\n  // All Transaction data, constant and variable\n  struct TransactionData {\n    address user;\n    address router;\n    address sendingAssetId;\n    address receivingAssetId;\n    address sendingChainFallback;\n    address receivingAddress;\n    address callTo;\n    bytes32 callDataHash;\n    bytes32 transactionId;\n    uint256 sendingChainId;\n    uint256 receivingChainId;\n    uint256 amount;\n    uint256 expiry;\n    uint256 preparedBlockNumber; // Needed for removal of active blocks on fulfill/cancel\n  }\n\n  // The structure of the signed data for fulfill\n  struct SignedData {\n    bytes32 transactionId;\n    uint256 relayerFee;\n    string functionIdentifier; // \"fulfill\" or \"cancel\"\n  }\n\n  // Adding/removing asset events\n  event RouterAdded(address indexed addedRouter, address indexed caller);\n\n  event RouterRemoved(address indexed removedRouter, address indexed caller);\n\n  // Adding/removing router events\n  event AssetAdded(address indexed addedAssetId, address indexed caller);\n\n  event AssetRemoved(address indexed removedAssetId, address indexed caller);\n\n  // Liquidity events\n  event LiquidityAdded(address indexed router, address indexed assetId, uint256 amount, address caller);\n\n  event LiquidityRemoved(address indexed router, address indexed assetId, uint256 amount, address recipient);\n\n  // Transaction events\n  event TransactionPrepared(\n    address indexed user,\n    address indexed router,\n    bytes32 indexed transactionId,\n    TransactionData txData,\n    address caller,\n    bytes encryptedCallData,\n    bytes encodedBid,\n    bytes bidSignature\n  );\n\n  event TransactionFulfilled(\n    address indexed user,\n    address indexed router,\n    bytes32 indexed transactionId,\n    TransactionData txData,\n    uint256 relayerFee,\n    bytes signature,\n    bytes callData,\n    address caller\n  );\n\n  event TransactionCancelled(\n    address indexed user,\n    address indexed router,\n    bytes32 indexed transactionId,\n    TransactionData txData,\n    uint256 relayerFee,\n    address caller\n  );\n\n  // Helper methods\n  function renounced() external returns (bool);\n\n  // Owner only methods\n  function addRouter(address router) external;\n\n  function removeRouter(address router) external;\n\n  function addAssetId(address assetId) external;\n\n  function removeAssetId(address assetId) external;\n\n  // Router only methods\n  function addLiquidity(uint256 amount, address assetId, address router) external payable;\n\n  function removeLiquidity(\n    uint256 amount,\n    address assetId,\n    address payable recipient\n  ) external;\n\n  // Methods for crosschain transfers\n  // called in the following order (in happy case)\n  // 1. prepare by user on sending chain\n  // 2. prepare by router on receiving chain\n  // 3. fulfill by user on receiving chain\n  // 4. fulfill by router on sending chain\n  function prepare(\n    InvariantTransactionData calldata txData,\n    uint256 amount,\n    uint256 expiry,\n    bytes calldata encryptedCallData,\n    bytes calldata encodedBid,\n    bytes calldata bidSignature\n  ) external payable returns (TransactionData memory);\n\n  function fulfill(\n    TransactionData calldata txData,\n    uint256 relayerFee,\n    bytes calldata signature,\n    bytes calldata callData\n  ) external returns (TransactionData memory);\n\n  function cancel(TransactionData calldata txData, uint256 relayerFee, bytes calldata signature) external returns (TransactionData memory);\n}\n"
    },
    "contracts/ProposedOwnable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\n/**\n * @title ProposedOwnable\n * @notice Contract module which provides a basic access control mechanism, \n * where there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed via a two step process:\n * 1. Call `proposeOwner`\n * 2. Wait out the delay period\n * 3. Call `acceptOwner`\n *\n * @dev This module is used through inheritance. It will make available the \n * modifier `onlyOwner`, which can be applied to your functions to restrict \n * their use to the owner.\n * \n * @dev The majority of this code was taken from the openzeppelin Ownable \n * contract\n *\n */\nabstract contract ProposedOwnable {\n  address private _owner;\n\n  address private _proposed;\n\n  uint256 private _proposedTimestamp;\n\n  uint256 private constant _delay = 7 days;\n\n  event OwnershipProposed(address indexed proposedOwner);\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n    * @notice Initializes the contract setting the deployer as the initial \n    * owner.\n    */\n  constructor() {\n    _setOwner(msg.sender);\n  }\n\n  /**\n    * @notice Returns the address of the current owner.\n    */\n  function owner() public view virtual returns (address) {\n    return _owner;\n  }\n\n  /**\n    * @notice Returns the address of the proposed owner.\n    */\n  function proposed() public view virtual returns (address) {\n    return _proposed;\n  }\n\n  /**\n    * @notice Returns the address of the proposed owner.\n    */\n  function proposedTimestamp() public view virtual returns (uint256) {\n    return _proposedTimestamp;\n  }\n\n  /**\n    * @notice Returns the delay period before a new owner can be accepted.\n    */\n  function delay() public view virtual returns (uint256) {\n    return _delay;\n  }\n\n  /**\n    * @notice Throws if called by any account other than the owner.\n    */\n  modifier onlyOwner() {\n      require(owner() == msg.sender, \"#OO:029\");\n      _;\n  }\n\n  /**\n    * @notice Sets the timestamp for an owner to be proposed, and sets the\n    * newly proposed owner as step 1 in a 2-step process\n   */\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\n    _setProposed(newlyProposed);\n  }\n\n  /**\n    * @notice Transfers ownership of the contract to a new account (`newOwner`).\n    * Can only be called by the current owner.\n    */\n  function acceptProposedOwner() public virtual onlyOwner {\n    require((block.timestamp - _proposedTimestamp) > _delay, \"#APO:030\");\n    _setOwner(_proposed);\n  }\n\n  function _setOwner(address newOwner) private {\n    address oldOwner = _owner;\n    _owner = newOwner;\n    emit OwnershipTransferred(oldOwner, newOwner);\n  }\n\n  function _setProposed(address newlyProposed) private {\n    _proposedTimestamp = block.timestamp;\n    _proposed = newlyProposed;\n    emit OwnershipProposed(_proposed);\n  }\n}"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return recover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return recover(hash, r, vs);\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/test/LibAssetTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport \"../lib/LibAsset.sol\";\n\n/// @title LibAssetTest\n/// @author Connext\n/// @notice Used to easily test the internal methods of\n///         LibAsset.sol by aliasing them to public\n///         methods.\n\ncontract LibAssetTest {\n  \n  constructor() {}\n\n  receive() external payable {}\n\n  function isEther(address assetId) public pure returns (bool) {\n    return LibAsset.isEther(assetId);\n  }\n\n  function getOwnBalance(address assetId) public view returns (uint256) {\n    return LibAsset.getOwnBalance(assetId);\n  }\n\n  function transferEther(address payable recipient, uint256 amount) public {\n    LibAsset.transferEther(recipient, amount);\n  }\n\n  function increaseERC20Allowance(address assetId, address spender, uint256 amount) public {\n    LibAsset.increaseERC20Allowance(assetId, spender, amount);\n  }\n\n  function decreaseERC20Allowance(address assetId, address spender, uint256 amount) public {\n    LibAsset.decreaseERC20Allowance(assetId, spender, amount);\n  }\n\n  function transferERC20(\n    address assetId,\n    address recipient,\n    uint256 amount\n  ) public {\n    LibAsset.transferERC20(assetId, recipient, amount);\n  }\n\n  // This function is a wrapper for transfers of Ether or ERC20 tokens,\n  // both standard-compliant ones as well as tokens that exhibit the\n  // missing-return-value bug.\n  function transferAsset(\n    address assetId,\n    address payable recipient,\n    uint256 amount\n  ) public {\n    LibAsset.transferAsset(assetId, recipient, amount);\n  }\n}\n"
    },
    "contracts/test/Counter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport \"../lib/LibAsset.sol\";\n\ncontract Counter {\n  bool public shouldRevert;\n  uint256 public count = 0;\n\n  constructor() {\n    shouldRevert = false;\n  }\n\n  function setShouldRevert(bool value) public {\n    shouldRevert = value;\n  }\n\n  function increment() public {\n    require(!shouldRevert, \"increment: shouldRevert is true\");\n    count += 1;\n  }\n\n  function incrementAndSend(address assetId, address recipient, uint256 amount) public payable {\n    if (LibAsset.isEther(assetId)) {\n      require(msg.value == amount, \"incrementAndSend: INVALID_ETH_AMOUNT\");\n    } else {\n      require(msg.value == 0, \"incrementAndSend: ETH_WITH_ERC\");\n      LibAsset.transferFromERC20(assetId, msg.sender, address(this), amount);\n    }\n    increment();\n\n    LibAsset.transferAsset(assetId, payable(recipient), amount);\n  }\n}"
    },
    "contracts/test/RevertableERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport '../interfaces/IERC20Minimal.sol';\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/* This token is ONLY useful for testing\n * Anybody can mint as many tokens as they like\n * Anybody can burn anyone else's tokens\n */\ncontract RevertableERC20 is ERC20 {\n\n  bool public shouldRevert = false;\n\n  constructor() ERC20(\"Revertable Token\", \"RVRT\") {\n    _mint(msg.sender, 1000000 ether);\n  }\n\n  function mint(address account, uint256 amount) external {\n     require(!shouldRevert, \"mint: SHOULD_REVERT\");\n    _mint(account, amount);\n  }\n\n  function burn(address account, uint256 amount) external {\n    require(!shouldRevert, \"burn: SHOULD_REVERT\");\n    _burn(account, amount);\n  }\n\n  function transfer(address account, uint256 amount) public override returns (bool) {\n    require(!shouldRevert, \"transfer: SHOULD_REVERT\");\n    _transfer(msg.sender, account, amount);\n    return true;\n  }\n\n  function setShouldRevert(bool _shouldRevert) external {\n    shouldRevert = _shouldRevert;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}